<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="/assets/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
        <link href="/assets/css/dashboard.css" rel="stylesheet">
        <link href="/assets/css/blog.css" rel="stylesheet">
        <link href="/assets/css/dark-game.css" rel="stylesheet">
        <link href="/assets/css/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">

        <%
            let leaderTitle = "Adj EPA/Play"
            let title = `${leaderTitle} | ${season} | Game on Paper`
            let subtitle = `${leaderTitle} during the ${season} season`;
        %>

        <meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <meta http-equiv="x-ua-compatible" content="IE=edge,chrome=1">
        <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <meta name="referrer" content="origin-when-cross-origin">
        <link rel="canonical" href="https://gameonpaper.com/cfb/year/<%= season %>/teams">
        <title><%= title %></title>
        <meta name="description" content="<%= subtitle %>">

        <meta property="og:site_name" content="GameOnPaper.com">
        <meta property="og:url" content="https://gameonpaper.com/cfb/year/<%= season %>/teams">
        <meta property="og:title" content="<%= title %>">
        <meta property="og:description" content="<%= subtitle %>">
        <meta property="og:image:width" content="1200">
        <meta property="og:image:height" content="630">
        <meta property="og:type" content="website">
        <meta name="twitter:site" content="Game on Paper">
        <meta name="twitter:url" content="https://gameonpaper.com/cfb/year/<%= season %>/teams">
        <meta name="twitter:title" content="<%= title %>">
        <meta name="twitter:description" content="<%= subtitle %>">
        <meta name="twitter:card" content="summary">
        <meta name="title" content="<%= title %>">
        <meta name="medium" content="website">
        <script defer data-domain="gameonpaper.com" src="https://plausible.io/js/script.js"></script>
        <style>
            @media (prefers-color-scheme: dark) {
            <% teams.forEach(t => {  %>
                img.team-logo-<%= t.teamId %> {
                    content: url('https://a.espncdn.com/i/teamlogos/ncaa/500-dark/<%= t.teamId %>.png')
                }
            <% }); %>
            }
            /* img.team-logo-153 {
                content: url('/assets/img/crying-jordan.png');
            }   */
            img.team-logo-61 {
                content: url('/assets/img/ennui-uga.png');
                /* Sourced from the Moon Crew Discord server */
            }
            img.team-logo-52 {
                content: url('/assets/img/fsu-face-52.png');
            }
        </style>
    </head>
    <body>
        <%- include('../../partials/nav-header') %>
        <!-- <div class="container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item" aria-current="page">Seasons</li>
                  <li class="breadcrumb-item" aria-current="page"><a href="/cfb/year/<%= season %>"><%= season %></a></li>
                  <li class="breadcrumb-item" aria-current="page"><a href="/cfb/year/<%= season %>"><%= leaderTitle %></a></li>
                </ol>
            </nav>
        </div> -->
        <div class="container">
            <div class="row mb-3">
                <div class="col-lg-10 offset-lg-1 col-xs-12">
                    <canvas id="epa_chart_canvas" style="display: block; box-sizing: border-box; height: 1200px; width: 800px;"  width="1200" height="800"></canvas>
                </div>
            </div>
        </div>

        <%- include('../../partials/footer') %>
        <%- include('../../partials/scripts') %>
        <script src="/assets/js/date-replace.js"></script>
        <script src="/assets/js/feather.min.js" crossorigin="anonymous"></script>
        <script src="/assets/js/Chart.min.js" crossorigin="anonymous"></script>
        <script>
            const isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const teams = <%- JSON.stringify(teams) %>;
            const specialImages = {
                "61": "/assets/img/ennui-uga.png",
                "52": "/assets/img/fsu-face-52.png",
            };

            function roundNumber(value, power10, fixed) {
                return (Math.round(parseFloat(value || 0) * (Math.pow(10, power10))) / (Math.pow(10, power10))).toFixed(fixed)
            }

            function getCurrentViewport() {
            // https://stackoverflow.com/a/8876069
                const width = Math.max(
                    document.documentElement.clientWidth,
                    window.innerWidth || 0
                )
                if (width <= 576) return 'xs'
                if (width <= 768) return 'sm'
                if (width <= 992) return 'md'
                if (width <= 1200) return 'lg'
                return 'xl'
            }
            
            Chart.plugins.register([
                
            {
                afterDraw: (chart) => {
                    let viewport = getCurrentViewport()
                    if (viewport == "xl" || viewport == "lg") {
                        let sizeWidth = chart.ctx.canvas.clientWidth;
                        let sizeHeight = chart.ctx.canvas.clientHeight;
                        let imgSize = 25.0;
                        /* credit */
                        chart.ctx.save()
                        chart.ctx.textAlign = "right"
                        chart.ctx.font = "8px Helvetica";
                        chart.ctx.fillStyle = window.matchMedia('(prefers-color-scheme: dark)').matches ? '#e8e6e3' : '#525252';
                        chart.ctx.fillText("Adj EPA/Play methodology adapted from Makenna Hack (@makennahack). Chart idea adapted from Bud Davis (@jbuddavis).", sizeWidth - (imgSize * 0.5) - 5, 7.1 * (sizeHeight / 8))
                        chart.ctx.fillText("From GameOnPaper.com, by Akshay Easwaran (@akeaswaran) and Saiem Gilani (@saiemgilani)", sizeWidth - (imgSize * 0.5) - 5, 7.25 * (sizeHeight / 8))
                        chart.ctx.restore();
                    }
                },
                beforeDraw: (chart) => {
                    let viewport = getCurrentViewport()
                    if (viewport == "xl" || viewport == "lg") {
                        let sizeWidth = chart.ctx.canvas.clientWidth;
                        let sizeHeight = chart.ctx.canvas.clientHeight;
                        let imgSize = 25.0;
                        /* good/bad labels*/
                        chart.ctx.save()
                        chart.ctx.textAlign = "right"
                        chart.ctx.font = "italic 10px Helvetica";
                        chart.ctx.globalAlpha = 0.75;
                        chart.ctx.fillStyle = window.matchMedia('(prefers-color-scheme: dark)').matches ? '#e8e6e3' : '#525252';
                        chart.ctx.fillText("Good Offense, Good Defense", sizeWidth - (imgSize * 0.5) - 10, 3.75 * (sizeHeight / 8))
                        chart.ctx.fillText("Good Offense, Bad Defense", sizeWidth - (imgSize * 0.5) - 10, 4.15 * (sizeHeight / 8))
                        chart.ctx.restore();

                        chart.ctx.save()
                        chart.ctx.textAlign = "left"
                        chart.ctx.font = "italic 10px Helvetica";
                        chart.ctx.globalAlpha = 0.75;
                        chart.ctx.fillStyle = window.matchMedia('(prefers-color-scheme: dark)').matches ? '#e8e6e3' : '#525252';
                        chart.ctx.fillText("Bad Offense, Good Defense", (sizeWidth * 0.075) - 5, 3.75 * (sizeHeight / 8))
                        chart.ctx.fillText("Bad Offense, Bad Defense", (sizeWidth * 0.075) - 5, 4.15 * (sizeHeight / 8))
                        chart.ctx.restore();
            


                    }
                }
            }
        ]);

            (function() {
                'use strict'
                feather.replace()

                const base = teams.filter(t => t.adjOffEpa && t.adjDefEpa)
                const data = base.map(t => {
                    return {
                        x: t.adjOffEpa,
                        y: t.adjDefEpa
                    }
                })
                const images = base.map(t => {
                    let img = new Image(25, 25)
                    if (Object.keys(specialImages).includes(t.teamId)) {
                        img.src = specialImages[t.teamId];
                    } else {
                        img.src = (isDarkMode) ? `https://a.espncdn.com/i/teamlogos/ncaa/500-dark/${t.teamId}.png` : `https://a.espncdn.com/i/teamlogos/ncaa/500/${t.teamId}.png`
                    }
                    return img;
                })
                const names = base.map(p => p.team)
                const labels = base.map(p => `Off: ${roundNumber(p.adjOffEpa, 2, 2)}, Def: ${roundNumber(p.adjDefEpa, 2, 2)}`)

                const averageX = (data.map(t => parseFloat(t.x)).reduce((a, b) => a + b)) / data.length
                const minX = Math.min(...data.map(t => t.x))
                const maxX = Math.max(...data.map(t => t.x))
                const averageY = (data.map(t => parseFloat(t.y)).reduce((a, b) => a + b)) / data.length
                const minY = Math.min(...data.map(t => t.y))
                const maxY = Math.max(...data.map(t => t.y))
                console.log(`X: avg - ${averageX}, min - ${minX}, max - ${maxX}`)
                console.log(`Y: avg - ${averageY}, min - ${minY}, max - ${maxY}`)



                const chartCtx = document.getElementById('epa_chart_canvas')
                const chartEpa = new Chart(
                    chartCtx, 
                    {
                        type: 'scatter',
                        data: {
                            labels: names,
                            datasets: [
                                {
                                    label: labels,
                                    data,
                                    borderColor: "black",
                                    pointBackgroundColor: "black",
                                    showLine: false,
                                    pointStyle: images,
                                    pointSize: 25,
                                },
                                {
                                    label: 'Avg X',
                                    data: [
                                        {
                                            x: averageX,
                                            y: -1
                                        },
                                        {
                                            x: averageX,
                                            y: 1
                                        }
                                    ],
                                    borderDash: [5, 15],
                                    borderColor: "red",
                                    pointBorderColor: "rgba(0,0,0,0)",
                                    pointBackgroundColor: "rgba(0,0,0,0)",
                                    showLine: true,
                                    clip: true
                                },
                                {
                                    label: 'Avg Y',
                                    data: [
                                        {
                                            x: -1,
                                            y: averageY,
                                        },
                                        {
                                            x: 1,
                                            y: averageY,
                                        }
                                    ],
                                    borderDash: [5, 15],
                                    borderColor: "red",
                                    pointBorderColor: "rgba(0,0,0,0)",
                                    pointBackgroundColor: "rgba(0,0,0,0)",
                                    showLine: true,
                                    clip: true
                                }
                            ]
                        },
                        options: {
                            
                            legend: false,
                            responsive: true,
                            title: {
                                display: true,
                                text: "Opponent-Adjusted EPA/Play - <%= season %>",
                                fontColor: (isDarkMode) ? "white" : "black",
                                fontSize: 18,
                                fontFamily: '"Chivo", "Fira Mono", serif'
                            },
                            tooltips: {
                                callbacks: {
                                    title: function(tooltipItem, data) {

                                        return data.labels[tooltipItem[0].index]
                                        // return `${label}: ${getNumberWithOrdinal(tooltipItem[0].value)} %tile`
                                    },
                                    label: function(tooltipItem, data) {
                                        console.log(tooltipItem)
                                        console.log(data)
                                        return data.datasets[tooltipItem.datasetIndex].label[tooltipItem.index]
                                    }
                                }
                            },
                            scales: {
                                xAxes: [{
                                    scaleLabel: {
                                        display: true,
                                        labelString: "Offense Adj EPA/Play",
                                        fontColor: (isDarkMode) ? '#e8e6e3' : '#525252',
                                        fontSize: 15,
                                        fontStyle: "oblique",
                                        fontFamily: '"Chivo", "Fira Mono", serif'
                                    },
                                    gridLines: {
                                        color: (isDarkMode) ? "#8D8D8D" : "#E5E5E5",
                                        zeroLineColor: (isDarkMode) ? "#8D8D8D" : "#E5E5E5",
                                    },
                                    type: 'linear',
                                    position: 'bottom',
                                    ticks: {
                                        min: -0.8,
                                        max: 0.8
                                    }
                                }],
                                yAxes: [{
                                    scaleLabel: {
                                        display: true,
                                        labelString: "Defense Adj EPA/Play",
                                        fontColor: (isDarkMode) ? '#e8e6e3' : '#525252',
                                        fontSize: 15,
                                        fontStyle: "oblique",
                                        fontFamily: '"Chivo", "Fira Mono", serif'
                                    },
                                    gridLines: {
                                        color: (isDarkMode) ? "#8D8D8D" : "#E5E5E5",
                                        zeroLineColor: (isDarkMode) ? "#8D8D8D" : "#E5E5E5",
                                    },
                                    type: 'linear',
                                    position: 'left',
                                    ticks: {
                                        reverse: true,
                                        min: -0.8,
                                        max: 0.8
                                    }
                                }]
                            }
                        }
                    }
                );
            })()
        </script>
    </body>
</html>
