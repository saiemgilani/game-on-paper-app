<!DOCTYPE html>
<html>
<%
const homeComp = gameData.gameInfo.competitors[0];
const awayComp = gameData.gameInfo.competitors[1];
const homeTeam = homeComp.team;
const awayTeam = awayComp.team;
function getNumberWithOrdinal(n) {
    var s = ["th", "st", "nd", "rd"];
    v = n % 100;
    return n + (s[(v - 20) % 10] || s[v] || s[0]);
}
function formatDown(down, playType) {
    if (playType.includes("Kickoff")) {
        return "Kickoff"
    } else if (playType.includes("Extra Point") || playType.includes("Conversion")) {
        return "PAT"
    } else if (down > -1) {
        return getNumberWithOrdinal(down)
    } else {
        return down
    }
}
function formatYardline(yardsToEndzone, offenseAbbrev, defenseAbbrev) {
    if (yardsToEndzone == 50) {
        return "50";
    } else if (yardsToEndzone < 50) {
        return `${defenseAbbrev} ${yardsToEndzone}`
    } else {
        return `${offenseAbbrev} ${100 - yardsToEndzone}`
    }
}
function formatDistance(down, type, distance, yardline) {
    var dist = (distance == 0 || yardline <= distance) ? "Goal" : distance
    var downForm = formatDown(down, type)
    if (downForm.includes("Kickoff") || downForm.includes("PAT")) {
        return downForm
    } else {
        return downForm + " & " + dist
    }
}
stat_key_title_mapping = {
    "EPA_plays" : "Total Plays",
    "scrimmage_plays" : "Scrimmage Plays",
    "EPA_overall_total" : "Total EPA",
    "EPA_overall_off" : "&emsp;&emsp;EPA",
    "EPA_overall_offense" : "&emsp;&emsp;Offensive EPA",
    "EPA_passing_overall" : "&emsp;&emsp;EPA",
    "EPA_rushing_overall" : "&emsp;&emsp;EPA",
    "EPA_per_play" : "&emsp;&emsp;EPA/Play",
    "EPA_passing_per_play" : "&emsp;&emsp;EPA/Play",
    "EPA_rushing_per_play" : "&emsp;&emsp;EPA/Play",
    "rushes" : "Rushes",
    "rushing_power" : "&emsp;&emsp;Power Run Attempts (Down &#8805; 3, Distance &#8804; 2)",
    "rushing_power_success" : "&emsp;&emsp;Successful Power Runs (Rate)",
    "rushing_stuff" : "&emsp;&emsp;Stuffed Runs (Yds Gained &#8804; 0)",
    "rushing_stopped" : "&emsp;&emsp;Stopped Runs (Yds Gained &#8804; 2)",
    "rushing_opportunity" : "&emsp;&emsp;Opportunity Runs (Yds Gained &#8805; 4)",
    "rushing_highlight" : "&emsp;&emsp;Highlight Runs (Yds Gained &#8805; 8)",
    "havoc_total" : "Havoc Plays Created",
    "havoc_total_pass" : "&emsp;&emsp;Passing",
    "havoc_total_rush" : "&emsp;&emsp;Rushing",
    "EPA_penalty": "&emsp;&emsp;Penalty EPA",
    "special_teams_plays" : "Total Plays",
    "EPA_sp" : "Total EPA",
    "EPA_special_teams" : "&emsp;&emsp;Special Teams EPA",
    "EPA_fg" : "&emsp;&emsp;Field Goal EPA",
    "EPA_punt" : "&emsp;&emsp;Punting EPA",
    "EPA_kickoff" : "&emsp;&emsp;Kickoff Return EPA",
    "TFL" : "TFLs Generated",
    "TFL_pass" : "&emsp;&emsp;Passing",
    "TFL_rush" : "&emsp;&emsp;Rushing",
    "EPA_success" : "Successful Plays (EPA > 0)",
    "EPA_success_pass" : "&emsp;&emsp;When Passing",
    "EPA_success_rush" : "&emsp;&emsp;When Rushing",
    "EPA_success_standard_down" : "&emsp;&emsp;On Standard Downs",
    "EPA_success_passing_down": "&emsp;&emsp;On Passing Downs",
    "EPA_success_early_down": "&emsp;&emsp;On Early Downs",
    "EPA_success_early_down_pass": "&emsp;&emsp;Successful Passes (Rate)",
    "EPA_success_early_down_rush": "&emsp;&emsp;Successful Rushes (Rate)",
    "early_downs": "Early Downs",
    "early_down_pass": "&emsp;&emsp;Passes",
    "early_down_rush": "&emsp;&emsp;Rushes",
    "EPA_success_late_down": "&emsp;&emsp;On Late Downs",
    "EPA_success_late_down_pass": "&emsp;&emsp;Successful Passes (Rate)",
    "EPA_success_late_down_rush": "&emsp;&emsp;Successful Rushes (Rate)",
    "late_downs": "Late Downs",
    "late_down_pass": "&emsp;&emsp;Passes",
    "late_down_rush": "&emsp;&emsp;Rushes",
    "EPA_explosive" : "Explosive Plays",
    "EPA_explosive_passing" : "&emsp;&emsp;When Passing (EPA > 2.4)",
    "EPA_explosive_rushing" : "&emsp;&emsp;When Rushing (EPA > 1.8)",
    "scoring_opps_opportunities" : "Scoring Opps",
    "scoring_opps_points" : "&emsp;&emsp;Total Points",
    "scoring_opps_pts_per_opp" : "&emsp;&emsp;Points per Opp",
    "field_pos_avg_start" : "Avg Starting FP",
    "field_pos_avg_starting_predicted_pts" : "&emsp;&emsp;Predicted Points",
    "sacks" : "Sacks Generated",
    "turnovers" : "Turnovers",
    "expected_turnovers" : "Expected Turnovers",
    "turnover_margin" : "Turnover Margin",
    "expected_turnover_margin" : "Expected Turnover Margin",
    "turnover_luck" : "Turnover Luck (pts)",
    "PD" : "Passes Defensed",
    "INT" : "&emsp;&emsp;Interceptions",
    "Int" : "&emsp;&emsp;Interceptions",
    "def_int" : "Interceptions",
    "fumbles" : "Fumbles Forced",
    "total_fumbles" : "&emsp;&emsp;Fumbles",
    "fumbles_lost" : "&emsp;&emsp;Fumbles Lost",
    "fumbles_recovered" : "&emsp;&emsp;Fumbles Recovered",
    "middle_8": "\"Middle 8\" Plays",
    "middle_8_pass": "&emsp;&emsp;Passes",
    "middle_8_rush": "&emsp;&emsp;Rushes",
    "EPA_middle_8": "&emsp;&emsp;EPA",
    "EPA_middle_8_success": "&emsp;&emsp;During \"Middle 8\"",
    "EPA_middle_8_success_pass": "&emsp;&emsp;Successful Passes (Rate)",
    "EPA_middle_8_success_rush": "&emsp;&emsp;Successful Rushes (Rate)",
    "EPA_middle_8_per_play" : "&emsp;&emsp;EPA/play",
    "EPA_early_down" : "&emsp;&emsp;EPA",
    "EPA_early_down_per_play" : "&emsp;&emsp;EPA/Play",
    "first_downs_created" : "First Downs Created",
    "early_down_first_down" : "&emsp;&emsp;First Downs Created",
    "passes" : "Passes",
    "rushes" : "Rushes",
    "drives" : "Total",
    "drive_total_gained_yards_rate" : "Available Yards %",
    "yards_per_drive" : "Yards/Drive",
    "plays_per_drive" : "Plays/Drive",
    "avg_field_position": "Avg Starting Field Position",
    "rushing_highlight_yards": "<a href=\"https://www.footballstudyhall.com/2018/2/2/16963820/college-football-advanced-stats-glossary\">Highlight Yards</a>",
    "rushing_highlight_yards_per_opp": "&emsp;&emsp;Per Rush Opportunity",
    "line_yards": "<a href=\"https://www.footballstudyhall.com/2018/2/2/16963820/college-football-advanced-stats-glossary\">OL Line Yards</a>",
    "line_yards_per_carry": "&emsp;&emsp;Per Carry",
    "yards_per_rush": "&emsp;&emsp;Yards/Play",
    "yards_per_pass": "&emsp;&emsp;Yards/Play",
    "yards_per_play": "&emsp;&emsp;Yards/Play",
    "off_yards" : "&emsp;&emsp;Yards",
    "rush_yards" : "&emsp;&emsp;Yards",
    "pass_yards" : "&emsp;&emsp;Yards",
    "total_yards":  "Total Yards",
    "total_off_yards" : "&emsp;&emsp;Offensive Yards",
    "total_sp_yards":"&emsp;&emsp;Special Teams Yards",
    "total_pen_yards":"&emsp;&emsp;Penalty Yards",
    "EPA_misc" : "&emsp;&emsp;Non-Scrimmage/Misc EPA",
    "open_field_yards" : "Open-Field Yards",
    "second_level_yards" : "Second-Level Yards",
    "drive_stopped_rate" : "<a href=\"https://theathletic.com/2419632/2021/03/02/college-football-defense-rankings-stop-rate/\">Stop Rate</a>",
    "EPA_non_explosive" : "EPA w/o Explosive Plays",
    "EPA_non_explosive_per_play" : "&emsp;&emsp;EPA/Play",
    "EPA_non_explosive_passing" : "&emsp;&emsp;When Passing",
    "EPA_non_explosive_passing_per_play" : "&emsp;&emsp;&emsp;&emsp;EPA/Play",
    "EPA_non_explosive_rushing" : "&emsp;&emsp;When Rushing",
    "EPA_non_explosive_rushing_per_play" : "&emsp;&emsp;&emsp;&emsp;EPA/Play"
}
turnover_vec = [
    "Blocked Field Goal",
    "Blocked Field Goal Touchdown",
    "Blocked Punt",
    "Blocked Punt Touchdown",
    "Field Goal Missed",
    "Missed Field Goal Return",
    "Missed Field Goal Return Touchdown",
    "Fumble Recovery (Opponent)",
    "Fumble Recovery (Opponent) Touchdown",
    "Fumble Return Touchdown",
    "Defensive 2pt Conversion",
    "Interception",
    "Interception Return",
    "Interception Return Touchdown",
    "Pass Interception Return",
    "Pass Interception Return Touchdown",
    "Kickoff Team Fumble Recovery",
    "Kickoff Team Fumble Recovery Touchdown",
    "Punt Touchdown",
    "Punt Return Touchdown",
    "Sack Touchdown",
    "Uncategorized Touchdown"
]
function injectDetmerSpan() {
    return `<abbr title="Stands for 'Downfield Eventful Throwing Metric Encouraging Ripping it'. Built to find the most sicko QB performances. Developed by the Moon Crew Discord & @SickosCommittee on Twitter.">DETMER</abbr>`;
}
function calculateDETMER(boxScore) {
    // yds/(400#games) (TD+INT)/(1+|TD-INT|)
    return (parseFloat(boxScore.Yds) / 400) * ((parseFloat(boxScore.Pass_TD) + parseFloat(boxScore.Int)) / (1 + Math.abs(parseFloat(boxScore.Pass_TD) - parseFloat(boxScore.Int))))
}

const CLEAN_LIST = [61]
function cleanField(team, field) {
    if (CLEAN_LIST.includes(parseInt(team.id))) {
        return team[field].toLocaleLowerCase()
    }
    return team[field]
}
function cleanAbbreviation(team) {
    return cleanField(team, 'abbreviation')
}

function cleanName(team) {
    return cleanField(team, 'nickname')
}

function cleanLocation(team) {
    return cleanField(team, 'location')
}

function roundNumber(value, power10, fixed) {
    return (Math.round(parseFloat(value || 0) * (Math.pow(10, power10))) / (Math.pow(10, power10))).toFixed(fixed)
}
function createPlayRow(play, canCollapse, collapsePrefix, expandingRowCallback) {
    var classText = "";
    if (turnover_vec.includes(play.type.text) || (play.text.includes("fumble") && play.change_of_poss == 1) || (play.start.down == 4 && parseFloat(play.statYardage) < parseFloat(play.start.distance) && !play.type.text.includes('Punt') && !play.type.text.includes('Timeout'))) {
        classText = " table-danger"
    } else if (play.scoringPlay == true) {
        classText = " table-success"
    } else if (play.text.toLocaleLowerCase().includes("penalty")) {
        classText = " table-warning"
    }
    var period = `Q${play.period}`;
    if (play.period > 5) {
        period = `${play.period - 4}OT`
    } else if (play.period == 5) {
        period = "OT"
    } else {
        period = `Q${play.period} ${play.clock.displayValue}`;
    }
    var offense = (play.start.pos_team.id == homeTeam.id) ? homeTeam : awayTeam;
    var defense = (play.start.pos_team.id == homeTeam.id) ? awayTeam : homeTeam;

    var scoreText = (play.scoringPlay == true) ? ` - <strong>${cleanAbbreviation(awayTeam)} ${play.awayScore}, ${cleanAbbreviation(homeTeam)} ${play.homeScore}</strong>` : ` - ${cleanAbbreviation(awayTeam)} ${play.awayScore}, ${cleanAbbreviation(homeTeam)} ${play.homeScore}`
    var collapsibleText = (canCollapse) ? `data-bs-toggle="collapse" href="#play-${collapsePrefix}-${play.game_play_number}"` : ''

    let fourthDownLink = `https://kazink.shinyapps.io/cfb_fourth_down/?team=${offense.location}&pos_score=${play.start.pos_team_score}&def_pos_score=${play.start.def_pos_team_score}&pos_timeouts=${play.start.posTeamTimeouts}&def_timeouts=${play.start.defTeamTimeouts}&distance=${play.start.distance}&yards_to_goal=${play.start.yardsToEndzone}&qtr=${play.period}&minutes=${play.clock.minutes}&seconds=${play.clock.seconds}&posteam_spread=${-1 * parseFloat(play.start.posTeamSpread)}&vegas_ou=${play.overUnder}&season=${play.season}&pos_team_receives_2H_kickoff=${play.modelInputs.start.pos_team_receives_2H_kickoff}&is_home=${play.modelInputs.start.is_home}`;
    var fourthDownEval = ""
    if (play.start.down == 4) {
        fourthDownEval = `<p style="text-align: center;"><strong>Fouth Down Decision Evaluation:</strong> <a href="${fourthDownLink}" target="__blank">link</a></p>`;
    }
    var baseRow = `
    <tr ${collapsibleText} class="accordion-toggle${classText}">
        <td style="text-align: left;">${period}</td>
        <td style="text-align: center;"><a href="/cfb/year/${play.season}/team/${play.pos_team}"><img class="img-fluid team-logo-${play.pos_team}" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/${play.pos_team}.png" alt="ESPN team id ${play.pos_team}"/></a></td>
        <td style="text-align: left;">(${formatDistance(play.start.down, play.type.text, play.start.distance, play.start.yardsToEndzone)} at ${ formatYardline(play.start.yardsToEndzone, cleanAbbreviation(offense), cleanAbbreviation(defense)) }) ${play.text}${scoreText}</td>
        <td class="numeral" style="text-align: center;">${roundNumber(parseFloat(play.expectedPoints.added), 2, 2)}</td>
        <td class="numeral" style="text-align: center;">${roundNumber(parseFloat(play.winProbability.before) * 100, 3, 1)}%</td>
        <td class="numeral" style="text-align: right;">${roundNumber(parseFloat(play.winProbability.added) * 100, 3, 1)}%</td>
    </tr>`;
    if (canCollapse) {
        baseRow += `<tr>
            <td colspan="6" class="hiddenRow">
                <div class="accordian-body collapse" id="play-${collapsePrefix}-${play.game_play_number}">
                    <div class="row p-1">`;
        if (expandingRowCallback != null) {
            baseRow += expandingRowCallback(play);
        } else {
            baseRow += `
            <div class="ms-sm-auto col-lg-6">
                <p style="text-align: center;"><strong>Play Type:</strong> ${play.type.text}</p>
                <p style="text-align: center;"><strong>Yards to End Zone (Before -> After):</strong> ${play.start.yardsToEndzone} -> ${play.end.yardsToEndzone}</p>
                <p style="text-align: center;"><strong>Started Drive at:</strong> ${formatYardline(play.drive_start, cleanAbbreviation(offense),cleanAbbreviation(defense))}</p>
                <p style="text-align: center;"><strong>ExpPts (After - Before = Added):</strong> ${roundNumber(parseFloat(play.expectedPoints.after), 2, 2)} - ${roundNumber(parseFloat(play.expectedPoints.before), 2, 2)} = ${roundNumber(parseFloat(play.expectedPoints.added), 2, 2)}</p>
                <p style="text-align: center;"><strong>Score Difference (Before):</strong> ${play.start.pos_score_diff} (${roundNumber(parseFloat(play.start.ExpScoreDiff), 2, 2)})</p>
                <p style="text-align: center;"><strong>Score Difference (End):</strong> ${play.end.pos_score_diff} (${roundNumber(parseFloat(play.end.ExpScoreDiff), 2, 2)})</p>
                <p style="text-align: center;"><strong>Change of Possession:</strong> ${play.change_of_poss}</p>
            </div>
            <div class="ms-sm-auto col-lg-6">
                <p style="text-align: center;"><strong>Score:</strong> ${cleanAbbreviation(awayTeam)} ${play.awayScore}, ${cleanAbbreviation(homeTeam)} ${play.homeScore}</p>
                <p style="text-align: center;"><strong>Drive Summary:</strong> ${play.drive_play_index} play${(parseInt(play.drive_play_index) == 1) ? "" : "s"}, ${play.drive_total_yards} yards</p>
                <p style="text-align: center;"><strong>Win Probability (Before):</strong> ${roundNumber(parseFloat(play.winProbability.before) * 100, 3, 1)}%</p>
                <p style="text-align: center;"><strong>Win Probability (After):</strong> ${roundNumber(parseFloat(play.winProbability.after) * 100, 3, 1)}%</p>
                <p style="text-align: center;"><strong>Away Score:</strong> ${play.start.awayScore} (${play.awayScore}) <strong>Home Score:</strong> ${play.start.homeScore} (${play.homeScore})</p>
                <p style="text-align: center;"><strong>Pos Team Timeouts:</strong> ${play.end.posTeamTimeouts} <strong>Defense Timeouts:</strong> ${play.end.defPosTeamTimeouts}</p>
                ${fourthDownEval}
            </div>
            `;
        }
        baseRow += `</div>
                </div>
            </td>
        </tr>`
    }
    return baseRow;
}
function buildPlayTable(plays, prefix, expandable, errorMsg, showGuide, expandingRowCallback) {
    if (plays == null || plays.length == 0) {
        return `<p class="text-center text-muted">${errorMsg}</p>`;
    }
    let guideText = (showGuide) ? `<caption>Play shading guide:
        <ul>
            <li><strong>Yellow</strong> - penalty</li>
            <li><strong>Red</strong> - turnover</li>
            <li><strong>Green</strong> - scoring play</li>
        </ul>
    </caption>` : ""

    var baseTable = `
    <table class="table table-sm table-responsive" style="border-collapse:collapse;">
        ${guideText}
        <thead>
            <tr>
                <th style="text-align: left;">Time</th>
                <th style="text-align: center;">Offense</th>
                <th style="text-align: left;">Play Description</th>
                <th style="text-align: center;">EPA</th>
                <th style="text-align: center;">WP%</th>
                <th style="text-align: right;">WPA</th>
            </tr>
        </thead>
        <tbody>`;
    plays.forEach(play => {
        baseTable += createPlayRow(play, expandable, prefix, expandingRowCallback);
    });
    baseTable += `</tbody>
    </table>`;
    return baseTable;
}
%>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/assets/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
    <link href="/assets/css/dashboard.css" rel="stylesheet">
    <link href="/assets/css/blog.css" rel="stylesheet">
    <link href="/assets/css/dark-game.css" rel="stylesheet">
    <link href="/assets/css/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">

    <%
    var title = ""
    var subtitle = ""
    if (gameData.gameInfo.status.type.completed == true || gameData.gameInfo.status.type.name.includes("STATUS_IN_PROGRESS") || (gameData.gameInfo.status.type.name.includes("STATUS_DELAYED") && gameData.plays.length > 0)) {
        title = `Game: ${cleanName(gameData.gameInfo.competitors[1].team)} ${gameData.gameInfo.competitors[1].score}, ${cleanName(gameData.gameInfo.competitors[0].team)} ${gameData.gameInfo.competitors[0].score} | Game on Paper`
    } else {
        title = `Game: ${cleanName(gameData.gameInfo.competitors[1].team)} vs ${cleanName(gameData.gameInfo.competitors[0].team)} | Game on Paper`
    }
    subtitle = `${cleanName(gameData.gameInfo.competitors[1].team)} vs ${cleanName(gameData.gameInfo.competitors[0].team)}`;
    %>

    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta http-equiv="x-ua-compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="referrer" content="origin-when-cross-origin">
    <link rel="canonical" href="http://gameonpaper.com/cfb/game/<%= gameData.id %>">
    <title><%= title %></title>
    <meta name="description" content="Advanced stats for <%= subtitle %>">

    <meta property="og:site_name" content="GameOnPaper.com">
    <meta property="og:url" content="http://gameonpaper.com/cfb/game/<%= gameData.id %>">
    <meta property="og:title" content="<%= title %>">
    <meta property="og:description" content="Advanced stats for <%= subtitle %>">
    <meta property="og:image" content="https://s.espncdn.com/stitcher/sports/football/college-football/events/<%= gameData.id %>.png?templateId=espn.com.share.1">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="630">
    <meta property="og:type" content="website">
    <meta name="twitter:site" content="Game on Paper">
    <meta name="twitter:url" content="http://gameonpaper.com/cfb/game/<%= gameData.id %>">
    <meta name="twitter:title" content="<%= title %>">
    <meta name="twitter:description" content="<%= subtitle %>">
    <meta name="twitter:card" content="summary">
    <meta name="title" content="<%= title %>">
    <meta name="medium" content="website">
    <%- include('../../partials/logos', {
        awayTeam,
        homeTeam,
    }) %>
    <script defer data-domain="gameonpaper.com" src="https://plausible.io/js/script.js"></script>
</head>
<body>
    <div class="container-fluid">
        <header class="blog-header py-3">
            <div class="row flex-nowrap justify-content-between align-items-center">
                <div class="col-2 pt-1">
                    <a class="btn btn-sm btn-outline-primary align-middle" href="/"><i class="bi-arrow-left"></i></a>
                </div>
                <div class="col-8 text-center">
                    <div>
                        <h2><%= cleanName(awayTeam) %> <%= awayComp.score %> @ <%= cleanName(homeTeam) %> <%= homeComp.score %></h2>
                        <p class="text-small" id="game-date"></p>
                    </div>
                </div>
                <div class="col-2 d-flex justify-content-end align-items-center">
                    <%

                    const networkMappings = {
                        "FOX" : 'https://www.foxsports.com/live',
                        "FS1" : 'https://www.foxsports.com/live/fs1',
                        "FS2" : 'https://www.foxsports.com/live/fs2',
                        "BTN" : 'https://www.foxsports.com/live/btn',
                        "NBC" : 'https://www.nbcsports.com/live',
                        "Peacock" : 'https://www.peacocktv.com',
                        "CBSSN" : 'https://www.cbssports.com/cbs-sports-network/',
                        "CBS" : 'https://www.cbssports.com/live/',
                        'PAC12' : 'https://pac-12.com/live',
                        'NFL NET' : 'https://www.nfl.com/network/watch/nfl-network-live',
                        'CW NETWORK' : "https://www.cwtv.com/sports/"
                    }


                    let networkName = gameData.gameInfo.broadcasts.length > 0 ? gameData.gameInfo.broadcasts[0].media.shortName : null;
                    let actionPrefix = 'Watch';
                    if (gameData.gameInfo.status.type.completed == true) {
                        actionPrefix = 'Replay'
                    } else if (gameData.gameInfo.status.type.name.includes("STATUS_IN_PROGRESS") || gameData.gameInfo.status.type.name.includes("STATUS_END_PERIOD") || gameData.gameInfo.status.type.name.includes("STATUS_HALFTIME")) {
                        actionPrefix = 'Watch'
                    } else {
                        actionPrefix = null;
                    }
                    if (actionPrefix != null && networkName != null && (networkName.includes('ESPN') || networkName.includes('LHN') || networkName.includes('ACCN') || networkName.includes('SECN') || networkName.includes('BIG12') || networkName.includes('ABC'))) { %>
                        <a class="btn btn-sm btn-outline-secondary" href="https://www.espn.com/watch/player/_/eventCalendarId/<%= gameData.gameInfo.id %>" target="_blank"><%= actionPrefix %> (<%= networkName %>)</a>
                    <% } else if (actionPrefix != null && networkName != null && networkMappings[networkName]) { %>
                        <a class="btn btn-sm btn-outline-secondary" href="<%= networkMappings[networkName] %>" target="_blank"><%= actionPrefix %> (<%= networkName %>)</a>
                    <%} %>
                </div>
            </div>
        </header>

        <div class="nav-scroller py-1 mb-3">
            <nav class="nav d-flex justify-content-between">
                <a href="#wpChart" class="p-2 link-secondary">WP Chart</a>
                <a href="#epChart" class="p-2 link-secondary">EPA Chart</a>
                <a href="#team-stats" class="p-2 link-secondary">Team Stats</a>
                <a href="#player-stats" class="p-2 link-secondary">Player Stats</a>
                <a href="#big-plays" class="p-2 link-secondary">Big Plays</a>
                <a href="#most-imp-plays" class="p-2 link-secondary">Most Important Plays</a>
                <a href="#scoring-plays" class="p-2 link-secondary">Scoring Plays</a>
                <a href="#all-plays" class="p-2 link-secondary">All Plays</a>
                <a class="p-2 link-secondary" href="https://www.espn.com/college-football/game/_/gameId/<%= gameData.gameInfo.id %>">Gamecast</a>
            </nav>
        </div>
    </div>
    <div class="container-fluid">
        <% if (gameData.plays.length > 0) { %>
            <div class="row mb-3">
                <main class="ms-sm-auto col-lg-6 px-md-4">
                    <div>
                        <h2 class="mb-0">Win Probability</h2>
                        <%
                            function printSpread() {
                                if (parseFloat(gameData.homeTeamSpread) > 0) {
                                    return `${cleanAbbreviation(homeTeam)} -${gameData.homeTeamSpread}`
                                } else if (parseFloat(gameData.homeTeamSpread) < 0) {
                                    return `${cleanAbbreviation(awayTeam)} ${gameData.homeTeamSpread}`
                                } else {
                                    return "PUSH"
                                }
                            }
                            let lastPlay = gameData.plays[gameData.plays.length - 1]
                        %>
                        <% if (lastPlay.gameSpreadAvailable == false) { %>
                            <p class="m-0 text-muted text-small">ESPN does not list betting odds for this game, so we've used default values: <%= cleanAbbreviation(homeTeam) %> -2.5, O/U 55.5.</p>
                        <% } %>
                        <p class="text-small">
                            <% if (gameData.gameInfo.status.type.completed == true) { %>
                                <a href="https://www.opensourcefootball.com/posts/2020-08-21-game-excitement-and-win-probability-in-the-nfl/">Game Excitement Index:</a> <%= (Math.round(gameData.gameInfo.gei * 100) / 100).toFixed(2) %> |
                            <% } %>Odds: <%= printSpread() %>, O/U <%= roundNumber(parseFloat(gameData.overUnder), 2, 1) %>
                            <% if ((gameData.gameInfo.status.type.name.includes("STATUS_IN_PROGRESS") || gameData.gameInfo.status.type.name.includes("STATUS_END_PERIOD") || gameData.gameInfo.status.type.name.includes("STATUS_HALFTIME")) && gameData.plays.length > 0) { %>
                                <% if (lastPlay.winProbability.before >= 0.5) { %>
                                 | Current: <%= (lastPlay.pos_team == homeTeam.id) ? cleanAbbreviation(homeTeam) : cleanAbbreviation(awayTeam) %> <%= ((Math.round(lastPlay.winProbability.before * 1000) / 1000) * 100).toFixed(1) %>%
                                <% } else { %>
                                 | Current: <%= (lastPlay.pos_team == homeTeam.id) ? cleanAbbreviation(awayTeam) : cleanAbbreviation(homeTeam) %> <%= ((Math.round((1.0 - lastPlay.winProbability.before) * 1000) / 1000) * 100).toFixed(1) %>%
                                <% } %>
                            <% } %>
                            <!-- can't offer download button here because of canvas security issues -->
                            | <a id="wp-download" download="game-wp-<%= gameData.gameInfo.id %>.jpg" href="">Download Chart</a></p>
                    </div>
                    <canvas class="my-4 w-100" id="wpChart" width="900" height="380"></canvas>
                </main>
                <main class="ms-sm-auto col-lg-6 px-md-4">
                    <div>
                        <h2 class="mb-0">Expected Points</h2>
                        <p class="text-small"><a id="ep-download" download="game-ep-<%= gameData.gameInfo.id %>.jpg" href="">Download Chart</a></p>
                    </div>
                    <canvas class="my-4 w-100" id="epChart" width="900" height="380"></canvas>
                </main>
            </div>
        <% } %>
        <% if ((gameData.gameInfo.status.type.name.includes("STATUS_DELAYED") && gameData.plays.length > 0) || gameData.gameInfo.status.type.name.includes("STATUS_IN_PROGRESS") || gameData.gameInfo.status.type.name.includes("STATUS_END_PERIOD") || gameData.gameInfo.status.type.name.includes("STATUS_HALFTIME") || gameData.gameInfo.status.type.completed == true) { %>
            <%
                let nonRateDecimalColumns = ["expected_turnovers","expected_turnover_margin","turnover_luck","EPA_middle_8_per_play","EPA_middle_8","EPA_middle_8_per_play","EPA_middle_8","EPA_early_down_per_play","EPA_early_down","EPA_sp","EPA_special_teams","EPA_kickoff","EPA_punt","EPA_fg","EPA_overall_off","EPA_per_play","EPA_passing_overall","EPA_passing_per_play", "EPA_rushing_overall","EPA_rushing_per_play","points_per_drive","yards_per_drive","plays_per_drive","avg_field_position","rushing_highlight_yards_per_opp","line_yards_per_carry","yards_per_rush","yards_per_pass","yards_per_play","drive_stopped_rate","EPA_non_explosive","EPA_non_explosive_passing","EPA_non_explosive_rushing","EPA_non_explosive_per_play","EPA_non_explosive_passing_per_play","EPA_non_explosive_rushing_per_play","EPA_overall_total","EPA_overall_offense","EPA_penalty"];
                let nonRateColumns = ["EPA_plays","scrimmage_plays","expected_turnover_margin","turnover_margin","turnovers","expected_turnovers","turnover_luck","early_downs","late_downs","fumbles","INT","PD","middle_8","EPA_middle_8_per_play","EPA_middle_8","EPA_early_down_per_play","EPA_early_down","fumbles_lost","fumbles_recovered","Int","TFL","TFL_pass","TFL_rush","total_fumbles","def_int","points_per_drive","drives","points_per_drive","yards_per_drive","plays_per_drive","drive_total_gained_yards_rate","avg_field_position","rushing_highlight_yards","line_yards","yards_per_rush","yards_per_pass","yards_per_play","off_yards","pass_yards","rush_yards","second_level_yards","open_field_yards","drive_stopped_rate","EPA_non_explosive","EPA_non_explosive_passing","EPA_non_explosive_rushing","EPA_non_explosive_per_play","EPA_non_explosive_passing_per_play","EPA_non_explosive_rushing_per_play"];
                let nonRatePercentColumns = ["drive_total_gained_yards_rate","drive_stopped_rate"];
                function handleRates(item, teamInfo, useSuffix, decimalPoints) {
                    let finalTeamInfo = (teamInfo == null) ? gameData.advBoxScore.team : teamInfo;
                    let finalDecimalPoints = decimalPoints || 1;
                    var result = ""
                    if (item == "EPA_misc") {
                        finalTeamInfo.forEach(teamData => {
                            let overall = parseFloat(teamData['EPA_overall_total']) || 0;
                            let off = parseFloat(teamData['EPA_overall_offense']) || 0;
                            let sp_epa = parseFloat(teamData['EPA_special_teams']) || 0;
                            let pen_epa = parseFloat(teamData['EPA_penalty']) || 0;
                            let val = (overall - off - sp_epa - pen_epa)
                            result += `<td class="numeral" style="text-align: center;">${roundNumber(val, 2, 2)}</td>`;
                        });
                    } else if (item == "avg_field_position") {
                        finalTeamInfo.forEach(teamData => {
                            let val = teamData[item] || 0;
                            let prefix = (val >= 50) ? "Own" : "Opp"
                            let printedVal = (val >= 50) ? (100 - parseFloat(val)) : val
                            result += `<td class="numeral" style="text-align: center;">${prefix} ${roundNumber(printedVal, 2, 0)}</td>`;
                        });
                    } else if (nonRatePercentColumns.includes(item)) {
                        finalTeamInfo.forEach(teamData => {
                            let val = teamData[item] || 0;
                            result += `<td class="numeral" style="text-align: center;">${roundNumber(parseFloat(val), 2, 0)}%</td>`;
                        });
                    } else if (nonRateDecimalColumns.includes(item)) {
                        finalTeamInfo.forEach(teamData => {
                            let val = teamData[item] || 0;
                            result += `<td class="numeral" style="text-align: center;">${roundNumber(parseFloat(val), 2, finalDecimalPoints)}</td>`;
                        });
                    } else if (nonRateColumns.includes(item)) {
                        finalTeamInfo.forEach(teamData => {
                            let val = teamData[item] || 0;
                            result += `<td class="numeral" style="text-align: center;">${val}</td>`;
                        });
                    } else {
                        finalTeamInfo.forEach(teamData => {
                            let val = teamData[item] || 0;
                            var rate = 0.0;
                            if (useSuffix) {
                                rate = 100.0 * teamData[`${item}_rate`]
                            } else {
                                rate = 100.0 * (parseFloat(val) / parseFloat(teamData["scrimmage_plays"]))
                            }
                            result += `<td class="numeral" style="text-align: center;">${val} (${roundNumber(parseFloat(rate), 2, 0)}%)</td>`;
                        });
                    }
                    return result;
                }

                Object.keys(gameData.advBoxScore).forEach(key => {
                    baseData = gameData.advBoxScore[key]
                    var teamKey = "pos_team"
                    if (Object.keys(baseData).includes("def_pos_team")) {
                        teamKey = "def_pos_team"
                    }
                    baseData.sort((a,b) => {
                        if (a[teamKey] == awayTeam.id && b[teamKey] == homeTeam.id) {
                            return -1;
                        } else if (b[teamKey] == awayTeam.id && a[teamKey] == homeTeam.id) {
                            return 1;
                        } else {
                            return 0;
                        }
                    });
                });

                function prepareTeamLogo(value) {
                    return `<th style="text-align: center;"><a href="/cfb/year/${season}/team/${value}"><img class="img-fluid team-logo-${value}" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/${(value == homeTeam.id) ? homeTeam.id : awayTeam.id}.png" alt="ESPN team id ${value}"/></a></th>`
                }
            %>
            <div id="team-stats" class="row mb-3">
                <div class="col-md-12 ms-sm-auto col-lg-12 px-md-4">
                    <h2 id="team-stats" class="d-inline">Team Stats <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#boxScoreContent" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                    <div class="panel-group">
                        <div class="panel panel-default">
                            <div id="boxScoreContent" class="panel-collapse show">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-4 ms-sm-auto col-lg-4">

                                            <%- include('./slim_box_score', {
                                                gameData,
                                                awayTeam,
                                                homeTeam,
                                                percentiles
                                            }) %>

                                            <div class="table-responsive">
                                                <% var columns = ["EPA_plays","EPA_overall_total", "EPA_overall_offense", "EPA_special_teams", "EPA_penalty", "EPA_misc"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align: left;">Expected Points</th>
                                                            <% gameData.advBoxScore.team.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.team, true, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="table-responsive">
                                                <% var columns = ["scrimmage_plays","off_yards","yards_per_play","EPA_overall_off","EPA_per_play","passes","pass_yards","yards_per_pass","EPA_passing_overall","EPA_passing_per_play","rushes","rush_yards","yards_per_rush", "EPA_rushing_overall","EPA_rushing_per_play"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th style="text-align: left;">Production</th>
                                                            <% gameData.advBoxScore.team.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.team, true, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="table-responsive">
                                                <% var columns = ["scrimmage_plays","rushes","rushing_power","rushing_power_success","rushing_stuff","rushing_stopped","rushing_opportunity","line_yards","line_yards_per_carry","rushing_highlight_yards","rushing_highlight_yards_per_opp"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Rushing</th>
                                                            <% gameData.advBoxScore.team.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.team, true, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        <div class="col-md-4 ms-sm-auto col-lg-4">
                                            <div class="table-responsive">
                                                <% var columns = ["EPA_plays","scrimmage_plays","EPA_explosive","EPA_explosive_passing","EPA_explosive_rushing","EPA_non_explosive","EPA_non_explosive_per_play","EPA_non_explosive_passing","EPA_non_explosive_passing_per_play","EPA_non_explosive_rushing","EPA_non_explosive_rushing_per_play"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Explosiveness</th>
                                                            <% gameData.advBoxScore.team.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.team, true, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="table-responsive">
                                                <% var columns = [
                                                    "EPA_success",
                                                    "EPA_success_pass",
                                                    "EPA_success_rush",
                                                    "EPA_success_standard_down",
                                                    "EPA_success_passing_down",
                                                    "EPA_success_early_down",
                                                    "EPA_success_late_down",
                                                    "EPA_middle_8_success",
                                                    "early_downs",
                                                    "early_down_first_down",
                                                    "EPA_early_down",
                                                    "EPA_early_down_per_play",
                                                    "early_down_pass",
                                                    "early_down_rush",
                                                    "EPA_success_early_down_pass",
                                                    "EPA_success_early_down_rush",
                                                    "middle_8",
                                                    "EPA_middle_8",
                                                    "EPA_middle_8_per_play",
                                                    "middle_8_pass",
                                                    "middle_8_rush",
                                                    "EPA_middle_8_success_pass",
                                                    "EPA_middle_8_success_rush"
                                                ];
                                                %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Situational</th>
                                                            <% gameData.advBoxScore.situational.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.situational, true, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        <div class="col-md-4 ms-sm-auto col-lg-4">
                                            <div class="table-responsive">
                                                <% var columns = [
                                                    "drives",
                                                    "avg_field_position",
                                                    "plays_per_drive",
                                                    "yards_per_drive",
                                                    "drive_total_gained_yards_rate"
                                                ];
                                                %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Drives</th>
                                                            <% gameData.advBoxScore.drives.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.drives, false, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="table-responsive">
                                                <% var columns = ["scrimmage_plays","drive_stopped_rate","havoc_total","havoc_total_pass","havoc_total_rush","TFL","TFL_pass","TFL_rush", "sacks","PD","def_int","fumbles"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Defensive</th>
                                                            <% gameData.advBoxScore.defensive.sort((a,b) => {
                                                                if (a["def_pos_team"] == awayTeam.id && b["def_pos_team"] == homeTeam.id) {
                                                                    return -1;
                                                                } else if (b["def_pos_team"] == awayTeam.id && a["def_pos_team"] == homeTeam.id) {
                                                                    return 1;
                                                                } else {
                                                                    return 0;
                                                                }
                                                            }) %>

                                                            <% gameData.advBoxScore.defensive.map(group => group.def_pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.defensive, true); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="table-responsive">
                                                <% var columns = ["turnovers","total_fumbles","fumbles_lost","fumbles_recovered","Int","turnover_margin","expected_turnovers","expected_turnover_margin","turnover_luck"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Turnovers</th>
                                                            <% gameData.advBoxScore.turnover.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.turnover); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                            <div class="table-responsive">
                                                <% var columns = ["special_teams_plays","EPA_sp","EPA_fg","EPA_punt","EPA_kickoff"]; %>
                                                <table class="table table-sm table-responsive">
                                                    <thead>
                                                        <tr>
                                                            <th class="box-heading">Special Teams</th>
                                                            <% gameData.advBoxScore.team.map(group => group.pos_team).forEach(value => { %>
                                                                <%- prepareTeamLogo(value) %>
                                                            <% }); %>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        <% columns.forEach(item => { %>
                                                            <tr>
                                                                <td style="text-align: left;"><%- (Object.keys(stat_key_title_mapping).includes(item)) ? stat_key_title_mapping[item] : item %></td>
                                                                <%- handleRates(item, gameData.advBoxScore.team, false, 2); %>
                                                            </tr>
                                                        <% }); %>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="player-stats" class="row mb-3">
                <%
                    let homeTeamBox = {
                        "pass" : gameData.advBoxScore.pass.filter(g => g.pos_team == homeTeam.id),
                        "rush" : gameData.advBoxScore.rush.filter(g => g.pos_team == homeTeam.id),
                        "receiver" : gameData.advBoxScore.receiver.filter(g => g.pos_team == homeTeam.id)
                    }
                    homeTeamBox.pass.sort((a, b) => parseFloat(b.EPA) - parseFloat(a.EPA))
                    homeTeamBox.rush.sort((a, b) => parseFloat(b.EPA) - parseFloat(a.EPA))
                    homeTeamBox.receiver.sort((a, b) => parseFloat(b.EPA) - parseFloat(a.EPA))
                    let awayTeamBox = {
                        "pass" : gameData.advBoxScore.pass.filter(g => g.pos_team == awayTeam.id),
                        "rush" : gameData.advBoxScore.rush.filter(g => g.pos_team == awayTeam.id),
                        "receiver" : gameData.advBoxScore.receiver.filter(g => g.pos_team == awayTeam.id)
                    }
                    awayTeamBox.pass.sort((a, b) => parseFloat(b.EPA) - parseFloat(a.EPA))
                    awayTeamBox.rush.sort((a, b) => parseFloat(b.EPA) - parseFloat(a.EPA))
                    awayTeamBox.receiver.sort((a, b) => parseFloat(b.EPA) - parseFloat(a.EPA))
                %>
                <div class="col-lg-6 ms-sm-auto px-md-4 mb-xs-3 mb-lg-0">
                    <div class="panel-group">
                        <div class="panel panel-default">
                          <div class="panel-heading">
                            <div class="panel-title">
                                <div class="d-flex justify-content-between">
                                    <h2 class="d-inline"><%= cleanLocation(awayTeam) %> <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#awayTeamCollapse" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                                    <th style="text-align: center;"><a href="/cfb/year/<%= season %>/team/<%= awayTeam.id %>"><img class="img-fluid team-logo-<%= awayTeam.id %>" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/<%= awayTeam.id %>.png" alt="ESPN team id <%= awayTeam.id %>"/></a></th>
                                </div>
                            </div>
                          </div>
                          <div id="awayTeamCollapse" class="panel-collapse show">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <table class="table table-sm table-responsive">
                                        <thead>
                                          <tr>
                                            <th rowspan="1" colspan="1"></th>
                                            <th rowspan="1" colspan="1" class="box-heading">Stat line</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;">Yards/play</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Expected Points Added per Play">EPA/play</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Total Expected Points Added">EPA</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Success Rate">SR</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Win Probability Added">WPA</th>
                                          </tr>
                                        </thead>
                                        <tbody>
                                        <% if (awayTeamBox.pass.length > 0) { %>
                                            <tr>
                                                <td colspan="8" class="gt_group_heading" style="color: black; font-weight: bold;" title="Includes pass attempts and sacks.">Dropbacks</td>
                                            </tr>
                                            <% awayTeamBox.pass.forEach(p => { %>
                                                <% if ((p.passer_player_name?.length ?? 0) > 0) { %>
                                                    <tr>
                                                        <td style="text-align: left;"><%= p.passer_player_name %></td>
                                                        <td style="text-align: left;"><%= p.Comp %>/<%= p.Att %>, <%= p.Yds %> yd<%= (Math.abs(parseFloat(p.Yds)) == 1) ? "" : "s" %>, <%= p.Pass_TD %> TD, <%= p.Int %> INT, <%= p.Sck %> Sck<%= (Math.abs(parseFloat(p.Sck)) == 1) ? "" : "s" %>, <%= roundNumber(parseFloat(p.exp_qbr), 2, 1) %> xQBR, <%= roundNumber(calculateDETMER(p), 2, 2) %> <%- injectDetmerSpan() %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.YPA || 0), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA_per_Play), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.SR) * 100, 2, 0) %>%</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.WPA) * 100, 2, 1) %>%</td>
                                                    </tr>
                                                <% } %>
                                            <% }); %>
                                        <% } %>
                                        <% if (awayTeamBox.rush.length > 0) { %>
                                            <tr>
                                            <td colspan="8" class="gt_group_heading" style="color: black; font-weight: bold;">Rush attempts</td>
                                            </tr>
                                            <% awayTeamBox.rush.forEach(p => { %>
                                                <% if ((p.rusher_player_name?.length ?? 0) > 0) { %>
                                                    <tr>
                                                        <td style="text-align: left;"><%= p.rusher_player_name %></td>
                                                        <td style="text-align: left;"><%= p.Car %> carr<%= (parseInt(p.Car) == 1) ? "y" : "ies" %>, <%= p.Yds %> yd<%= (Math.abs(parseFloat(p.Yds)) == 1) ? "" : "s" %>, <%= p.Rush_TD %> TD, <%= p.Fum %> Fum (<%= p.Fum_Lost %> lost)</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.YPC || 0), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA_per_Play), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.SR) * 100, 2, 0) %>%</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.WPA) * 100, 2, 1) %>%</td>
                                                    </tr>
                                                <% } %>
                                            <% }); %>
                                        <% } %>
                                        <% if (awayTeamBox.receiver.length > 0) { %>
                                            <tr>
                                                <td colspan="8" class="gt_group_heading" style="color: black; font-weight: bold;">Pass targets</td>
                                            </tr>
                                            <% awayTeamBox.receiver.forEach(p => { %>
                                                <% if ((p.receiver_player_name?.length ?? 0) > 0) { %>
                                                    <tr>
                                                        <td style="text-align: left;"><%= p.receiver_player_name %></td>
                                                        <td style="text-align: left;"><%= p.Rec %> catch<%= (parseInt(p.Rec) == 1) ? "" : "es" %> (<%= p.Tar %> target<%= (parseInt(p.Tar) == 1) ? "" : "s" %>), <%= p.Yds %> yd<%= (Math.abs(parseFloat(p.Yds)) == 1) ? "" : "s" %>, <%= p.Rec_TD %> TD, <%= p.Fum %> Fum (<%= p.Fum_Lost %> lost)</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.YPT || 0), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA_per_Play), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.SR) * 100, 2, 0) %>%</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.WPA) * 100, 2, 1) %>%</td>
                                                    </tr>
                                                <% } %>
                                            <% }); %>
                                        <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                          </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 ms-sm-auto px-md-4">
                    <div class="panel-group">
                        <div class="panel panel-default">
                          <div class="panel-heading">
                            <div class="panel-title">
                                <div class="d-flex justify-content-between">
                                    <h2 class="d-inline"><%= cleanLocation(homeTeam) %> <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#homeTeamCollapse" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                                    <th style="text-align: center;"><a href="/cfb/year/<%= season %>/team/<%= homeTeam.id %>"><img class="img-fluid team-logo-<%= homeTeam.id %>" width="35px" src="https://a.espncdn.com/i/teamlogos/ncaa/500/<%= homeTeam.id %>.png" alt="ESPN team id <%= homeTeam.id %>"/></a></th>
                                </div>
                            </div>
                          </div>
                          <div id="homeTeamCollapse" class="panel-collapse show">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <table class="table table-sm table-responsive">
                                        <thead>
                                          <tr>
                                            <th rowspan="1" colspan="1"></th>
                                            <th rowspan="1" colspan="1" class="box-heading">Stat line</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;">Yards/play</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Expected Points Added per Play">EPA/play</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Total Expected Points Added">EPA</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Success Rate">SR</th>
                                            <th rowspan="1" colspan="1" class="box-heading" style="text-align: center;" title="Win Probability Added">WPA</th>
                                          </tr>
                                        </thead>
                                        <tbody>
                                        <% if (homeTeamBox.pass.length > 0) { %>
                                            <tr>
                                                <td colspan="8" class="gt_group_heading" style="color: black; font-weight: bold;" title="Includes pass attempts and sacks.">Dropbacks</td>
                                            </tr>
                                            <% homeTeamBox.pass.forEach(p => { %>
                                                <% if ((p.passer_player_name?.length ?? 0) > 0) { %>
                                                    <tr>
                                                        <td style="text-align: left;"><%= p.passer_player_name %></td>
                                                        <td style="text-align: left;"><%= p.Comp %>/<%= p.Att %>, <%= p.Yds %> yd<%= (Math.abs(parseFloat(p.Yds)) == 1) ? "" : "s" %>, <%= p.Pass_TD %> TD, <%= p.Int %> INT, <%= p.Sck %> Sck<%= (Math.abs(parseFloat(p.Sck)) == 1) ? "" : "s" %>, <%= roundNumber(parseFloat(p.exp_qbr), 2, 1) %> xQBR, <%= roundNumber(calculateDETMER(p), 2, 2) %> <%- injectDetmerSpan() %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.YPA || 0), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA_per_Play), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.SR) * 100, 2, 0) %>%</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.WPA) * 100, 2, 1) %>%</td>
                                                    </tr>
                                                <% } %>
                                            <% }); %>
                                        <% } %>
                                        <% if (homeTeamBox.rush.length > 0) { %>
                                            <tr>
                                            <td colspan="8" class="gt_group_heading" style="color: black; font-weight: bold;">Rush attempts</td>
                                            </tr>
                                            <% homeTeamBox.rush.forEach(p => { %>
                                                <% if ((p.rusher_player_name?.length ?? 0) > 0) { %>
                                                    <tr>
                                                        <td style="text-align: left;"><%= p.rusher_player_name %></td>
                                                        <td style="text-align: left;"><%= p.Car %> carr<%= (parseInt(p.Car) == 1) ? "y" : "ies" %>, <%= p.Yds %> yd<%= (Math.abs(parseFloat(p.Yds)) == 1) ? "" : "s" %>, <%= p.Rush_TD %> TD, <%= p.Fum %> Fum (<%= p.Fum_Lost %> lost)</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.YPC || 0), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA_per_Play), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.SR) * 100, 2, 0) %>%</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.WPA) * 100, 2, 1) %>%</td>
                                                    </tr>
                                                <% } %>
                                            <% }); %>
                                        <% } %>
                                        <% if (homeTeamBox.receiver.length > 0) { %>
                                            <tr>
                                                <td colspan="8" class="gt_group_heading" style="color: black; font-weight: bold;">Pass targets</td>
                                            </tr>
                                            <% homeTeamBox.receiver.forEach(p => { %>
                                                <% if ((p.receiver_player_name?.length ?? 0) > 0) { %>
                                                    <tr>
                                                        <td style="text-align: left;"><%= p.receiver_player_name %></td>
                                                        <td style="text-align: left;"><%= p.Rec %> catch<%= (parseInt(p.Rec) == 1) ? "" : "es" %> (<%= p.Tar %> target<%= (parseInt(p.Tar) == 1) ? "" : "s" %>), <%= p.Yds %> yd<%= (Math.abs(parseFloat(p.Yds)) == 1) ? "" : "s" %>, <%= p.Rec_TD %> TD, <%= p.Fum %> Fum (<%= p.Fum_Lost %> lost)</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.YPT || 0), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA_per_Play), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.EPA), 2, 2) %></td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.SR) * 100, 2, 0) %>%</td>
                                                        <td class="numeral" style="text-align: center;"><%= roundNumber(parseFloat(p.WPA) * 100, 2, 1) %>%</td>
                                                    </tr>
                                                <% } %>
                                            <% }); %>
                                        <% } %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                          </div>
                        </div>
                    </div>
                </div>
            </div>
        <% } %>
        <%
            var bigPlays = [...gameData.plays]
            bigPlays.sort((a, b) => {
                var diff = Math.abs(a.expectedPoints.added) - Math.abs(b.expectedPoints.added)
                if (diff < 0) {
                    return 1
                } else if (diff > 0) {
                    return -1
                } else {
                    return 0
                }
            })
            bigPlays = bigPlays.slice(0, 10)
            var mostImpPlays = [...gameData.plays]
            mostImpPlays.sort((a, b) => {
                var diff = Math.abs(a.winProbability.added) - Math.abs(b.winProbability.added)
                if (diff < 0) {
                    return 1
                } else if (diff > 0) {
                    return -1
                } else {
                    return 0
                }
            })
            mostImpPlays = mostImpPlays.slice(0, 10)
        %>
        <div class="row mb-3">
            <div class="col-lg-6 ms-sm-auto px-md-4" id="big-plays">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h2>Big Plays <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#bigPlaysTable" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                                <p class="text-small">As determined by absolute EPA.</p>
                            </div>
                        </div>
                        <div id="bigPlaysTable" class="panel-collapse collapse">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <%- buildPlayTable(bigPlays, "big-play", true, "No big plays listed for this game.", false); %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 ms-sm-auto px-md-4" id="most-imp-plays">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h2>Most Important Plays <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#importantPlaysTable" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                                <p class="text-small">As determined by absolute WPA.</p>
                            </div>
                        </div>
                        <div id="importantPlaysTable" class="panel-collapse collapse">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <%- buildPlayTable(mostImpPlays, "most-imp-play", true, "No important plays listed for this game.", false); %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <main class="col-md-12 ms-sm-auto col-lg-12 px-md-4">
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h2 id="scoring-plays">Scoring Plays <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#scoringPlayTable" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                            </div>
                        </div>
                        <div id="scoringPlayTable" class="panel-collapse collapse">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <%- buildPlayTable(gameData.scoringPlays, "scoring-play", true, "No scoring plays in this game.", false); %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
        <div class="row mb-3">
            <main class="col-md-12 ms-sm-auto col-lg-12 px-md-4">
                <%
                    var gamePlays = [...gameData.plays]
                    var subTitle = ""
                    if (gameData.gameInfo.status.type.completed != true) {
                        subTitle = '<p class="text-small">Most recent plays first. Recent plays may have weird EPA/WPA results due to ESPN data weirdness.</p>';
                        gamePlays.reverse()
                    }
                %>
                <div class="panel-group">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <div class="panel-title">
                                <h2 id="all-plays">All Plays <span class="d-inline text-small h6"><a data-bs-toggle="collapse" href="#allPlayTable" style="text-decoration: none;" role="button" aria-expanded="true">[show/hide]</a></span></h2>
                                <%- subTitle %>
                            </div>
                        </div>
                        <div id="allPlayTable" class="panel-collapse collapse">
                            <div class="panel-body">
                                <div class="table-responsive">
                                    <%- buildPlayTable(gamePlays, "all", true, "No plays in this game.", true); %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- <p id="content"></p> -->
            </main>
        </div>
        <%
        var statusDetail = gameData.gameInfo.status.type.detail;
        if (!(statusDetail.includes("F") || statusDetail.includes("Cancel") || statusDetail.includes("Postpone") || statusDetail.includes("Delay"))) { %>
            <div class="row mb-3">
                <div class="col-12">
                    <p class="text-small text-muted">Page will auto-refresh every minute.</p>
                </div>
            </div>
        <% } %>
    </div>
    <%- include('../../partials/footer') %>
    <%- include('../../partials/scripts') %>
    <script src="/assets/js/feather.min.js" crossorigin="anonymous"></script>
    <script src="/assets/js/Chart.min.js" crossorigin="anonymous"></script>
    <script>
        const DateTime = luxon.DateTime;
        const networkMappings = {
            "FOX" : 'https://www.foxsports.com/live',
            "FS1" : 'https://www.foxsports.com/live/fs1',
            "BTN" : 'https://www.foxsports.com/live/btn',
            "NBC" : 'https://www.nbcsports.com/live',
            "Peacock" : 'https://www.peacocktv.com',
            "CBSSN" : 'https://www.cbssports.com/cbs-sports-network/',
            "CBS" : 'https://www.cbssports.com/live/',
            'PAC12' : 'https://pac-12.com/live',
            'NFL NET' : 'https://www.nfl.com/network/watch/nfl-network-live',
            'CW NETWORK' : "https://www.cwtv.com/sports/"
        }

        var gameData = <%- JSON.stringify(gameData) %>;
        // document.body.querySelector("#content").innerHTML = "<pre>" + JSON.stringify(gameData.plays, null, 2) +  "</pre>";
        var statusDetail = gameData.gameInfo.status.type.detail;
        if (gameData.gameInfo.status.type.completed == true || statusDetail.includes("Cancel") || statusDetail.includes("Postpone") || statusDetail.includes("Delay")) {
            document.body.querySelector("#game-date").innerText = statusDetail + " - " + DateTime.fromISO(gameData.gameInfo.date).toLocaleString(DateTime.DATETIME_FULL);
        } else {
            document.body.querySelector("#game-date").innerText = "LIVE - " + statusDetail
            setTimeout("location.reload(true);", 60 * 1000);
        }
    </script>
    <script src="/assets/js/dashboard.js"></script>
</body>
</html>